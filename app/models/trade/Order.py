from datetime import datetime

from app.models.calculators.frameworks.FrameWork import FrameWork

class Order:

    # todo add risk type for ai training later

    # Self Defined Parameters
    trade_id: str
    entry_frame_work: FrameWork
    confirmations: list[FrameWork]

    created_at: str
    opened_at: str
    closed_at: str

    risk_percentage: float
    money_at_risk: float

    # Generated by Builder
    orderLinkId: str

    # Required on Broker
    orderType:str
    symbol: str
    category: str
    side: str
    qty: str #must be defined in Risk Manager

    # Must be set after sending Request
    orderId: str

    # Spot Logic
    isLeverage: int
    marketUnit: str
    orderFilter: str
    orderlv: str

    # Specific attributes (optional)
    stopLoss: str
    takeProfit: str
    price: str
    timeInForce: str
    closeOnTrigger: bool
    reduceOnly: bool

    # Conditional
    triggerPrice: str
    triggerBy:str
    tpTriggerBy: str
    slTriggerBy: str
    triggerDirection: int

    # Limit Logic attributes (optional)
    tpslMode: str
    tpLimitPrice: str
    tpOrderType: str
    slOrderType: str
    slLimitPrice: str

    # Response
    createdTime: str
    updatedTime: str
    lastPriceOnCreated: str
    leavesQty: str
    stopOrderType:str
    orderStatus: str
    unrealisedPnL: float

    def __init__(self):
        self.created_at = str(datetime.now())

    def __setattr__(self, key, value):
        # Update updatedAt whenever an attribute is changed
        super().__setattr__(key, value)
        if key != 'updatedTime':  # Avoid recursive updates
            super().__setattr__('updatedTime', datetime.now())

    def __str__(self):
        return str(self.to_dict())

    def to_dict(self):
        def transform_value(key, value):
            """Applies necessary transformations to specific fields."""
            if isinstance(value, list):
                return [item.to_dict() for item in value if hasattr(item, "to_dict")]
            elif hasattr(value, "to_dict"):
                return value.to_dict()
            return value

        return {
            "Order": {
                key: transform_value(key, getattr(self, key))
                if hasattr(self, key) else None
                for key in self.__annotations__.keys()
            }
        }

from datetime import datetime

from app.models.calculators.frameworks.FrameWork import FrameWork
from app.monitoring.logging.logging_startup import logger


class Order:

    # Self Defined Parameters
    trade_id: str=None
    entry_frame_work: FrameWork=None
    confirmations: list[FrameWork]=[]
    order_result_status: str=None

    risk_percentage: float=None
    money_at_risk: float=None

    # Generated by Builder
    orderLinkId: str=None

    # Required on Broker
    orderType:str=None
    symbol: str=None
    category: str=None
    side: str=None
    qty: str=None #must be defined in Risk Manager

    # Must be set after sending Request
    orderId: str=None

    # Spot Logic
    isLeverage: int=None
    marketUnit: str=None
    orderIv: str=None

    # Specific attributes (optional)
    stopLoss: str=None
    takeProfit: str=None
    price: str=None
    timeInForce: str=None
    closeOnTrigger: bool=None
    reduceOnly: bool=None

    # Conditional
    triggerPrice: str=None
    triggerBy:str=None
    tpTriggerBy: str=None
    slTriggerBy: str=None
    triggerDirection: int=None

    # Limit Logic attributes (optional)
    tpslMode: str=None
    tpLimitPrice: str=None
    tpOrderType: str=None
    slOrderType: str=None
    slLimitPrice: str=None

    # Response
    createdTime: str=None
    updatedTime: str=None
    lastPriceOnCreated: str=None
    leavesQty: str=None
    stopOrderType:str=None
    orderStatus: str=None
    leavesValue: str=None

    def __init__(self):
        self.created_at = str(datetime.now())

    def __str__(self):
        return str(self.to_dict())

    def to_dict(self):
        try:
            def transform_value(key, value):
                """Applies necessary transformations to specific fields."""
                if isinstance(value, list):
                    return [item.to_dict() for item in value if hasattr(item, "to_dict")]
                elif hasattr(value, "to_dict"):
                    return value.to_dict()
                return value

            return {
                "Order": {
                    key: transform_value(key, getattr(self, key))
                    if hasattr(self, key) else None
                    for key in self.__annotations__.keys()
                }
            }
        except Exception as e:
            logger.exception(e)

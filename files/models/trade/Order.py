import uuid
from typing import Optional

from bson import ObjectId
from pydantic import BaseModel, Field

from files.models.PyObjectId import PyObjectId
from files.models.frameworks.FrameWork import FrameWork


class Order(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id", default=None)

    # Self Defined Parameters
    tradeId: str = Field(default="")
    entry_frame_work: Optional[FrameWork] = Field(default=None, alias="entryFrameWork",exclude=True)
    confirmations: Optional[list[FrameWork]] = Field(default=None, exclude=True)
    order_result_status: Optional[str] = Field(default=None, alias="orderResultStatus")

    risk_percentage: Optional[float] = Field(default=None, alias="riskPercentage")
    money_at_risk: Optional[float] = Field(default=None, alias="moneyAtRisk")

    # Generated by Builder
    order_link_id: Optional[str] = Field(alias="orderLinkId",default_factory=lambda: uuid.uuid4().__str__())

    # Required on Broker
    order_type: Optional[str] = Field(default=None, alias="orderType")
    symbol: Optional[str] = Field(default=None)
    category: Optional[str] = Field(default=None)
    side: Optional[str] = Field(default=None)
    qty: Optional[str] = Field(default=None)

    # Must be set after sending Request
    order_id: Optional[str] = Field(default=None, alias="orderId")

    # Spot Logic
    is_leverage: Optional[str] = Field(default=None, alias="isLeverage")
    market_unit: Optional[str] = Field(default=None, alias="marketUnit")
    order_iv: Optional[str] = Field(default=None, alias="orderIv")

    # Specific attributes (optional)
    stop_loss: Optional[str] = Field(default=None, alias="stopLoss")
    take_profit: Optional[str] = Field(default=None, alias="takeProfit")
    price: Optional[str] = Field(default=None)
    time_in_force: Optional[str] = Field(default=None, alias="timeInForce")
    close_on_trigger: Optional[bool] = Field(default=None, alias="closeOnTrigger")
    reduce_only: Optional[bool] = Field(default=None, alias="reduceOnly")

    # Conditional
    trigger_price: Optional[str] = Field(default=None, alias="triggerPrice")
    trigger_by: Optional[str] = Field(default=None, alias="triggerBy")
    tp_trigger_by: Optional[str] = Field(default=None, alias="tpTriggerBy")
    sl_trigger_by: Optional[str] = Field(default=None, alias="slTriggerBy")
    trigger_direction: Optional[int] = Field(default=None, alias="triggerDirection")

    # Limit Logic attributes (optional)
    tpsl_mode: Optional[str] = Field(default=None, alias="tpslMode")
    tp_limit_price: Optional[str] = Field(default=None, alias="tpLimitPrice")
    tp_order_type: Optional[str] = Field(default=None, alias="tpOrderType")
    sl_order_type: Optional[str] = Field(default=None, alias="slOrderType")
    sl_limit_price: Optional[str] = Field(default=None, alias="slLimitPrice")

    # Response
    created_time: Optional[str] = Field(default=None, alias="createdTime")
    updated_time: Optional[str] = Field(default=None, alias="updatedTime")
    last_price_on_created: Optional[str] = Field(default=None, alias="lastPriceOnCreated")
    leaves_qty: Optional[str] = Field(default=None, alias="leavesQty")
    stop_order_type: Optional[str] = Field(default=None, alias="stopOrderType")
    order_status: Optional[str] = Field(default=None, alias="orderStatus")
    leaves_value: Optional[str] = Field(default=None, alias="leavesValue")

    class Config:
        json_encoders = {ObjectId: str}  # Convert ObjectId to str in JSON
        populate_by_name = True  # Allow alias `_id` to be populated